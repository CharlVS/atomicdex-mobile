# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# Very Good Analysis is a set of Dart analysis rules used by the Very Good
# Core Team. It extends the recommended set of rules from the Dart team.
# It's known for being strict but, but it enforces a very deterministic
# style and format of code.
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  language:
    # NB! This is a high priority to remove this. It is a workaround for legacy
    # code which uses `dynamic` in a way that is not supported by the analyzer.
    # Removing this adds 800+ errors to the project.
    # See here for more details:
    # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
    strict-casts: false

  errors:
    todo: ignore

  exclude:
    - "lib/l10n/**"
    - test/.test_coverage.dart
    - lib/generated_plugin_registrant.dart

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.


  # MRC: Rules below are in alphabetical order for easier maintenance
  rules:
    avoid_redundant_argument_values: false

    flutter_style_todos: false

    # always_use_package_imports: false

    omit_local_variable_types: false

    # If you are coming here to disable this rule because you are getting
    # many warnings for the `[StatefulWidget.createState]`, please don't.  
    # Instead, change the type of the `createState` method as follows:
    # Old: `_MyStatefulWidgetState createState() => _MyStatefulWidgetState();`
    # New: `State<MyStatefulWidget> createState() => _MyStatefulWidgetState();`
    #! library_private_types_in_public_api: false

    # TODO: Disable this and make changes. This is a bad practice and should be avoided.
    # MRC: Most of our uses of print are non-vital
    # Disabling for now, but we might want to re-enable in the future
    avoid_print: false

    # TODO: Disable this and make changes. Whilst this may be the norm in other languages
    # it is not in Dart.
    # MRC: Flutter really wants us to use lowerCamelCase for constants
    # I won't do it for now, so disabling the linter rule
    constant_identifier_names: false

    # MRC: Not always necessary, because sometimes it's useful to have a single
    # statement right in front of the if
    curly_braces_in_flow_control_structures: false

    # MRC: This rule is about naming files as lowercase_with_underscores
    # This seems to be very useful, but the test files aren't named that way
    # I picked two files that needed renamig with this rule, so I won't disable it
    # Instead I decided to disable this rule in a per file basis for the test files
    # We might disable this in the future if it causes problems
    # This rule is currently enabled by comment, comment the line to disable
    # file_names: false

    # MRC: Too many occurrences to fix at once, disabling for now
    prefer_const_constructors: false

    # TODO: Disable and make changes. Whilst this may be the norm in other languages
    # it is not in Dart.
    # MRC: This is a bit of personal preference, but I prefer single quotes strings
    # over double quotes strings. If it causes problems or deeply annoys somebody else
    # I have no problem in disabling it
    prefer_single_quotes: true

    # MRC: Seems to cause a lot of linter warnings on localization files at the moment
    # I will have to figure out the reason for that first, then we might reenable
    unnecessary_string_escapes: false

    # TODO: Fix this. Not passing key to widget constructors is a bad practice
    # and may have performance/stability implications.
    # MRC: Too many occurrences to fix at once, disabling it for now
    use_key_in_widget_constructors: false

    # Ideally, all public members should have documentation strings but
    # it's not necessary since this isn't a public package.
    public_member_api_docs: false


# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
