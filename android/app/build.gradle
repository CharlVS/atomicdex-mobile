def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.komodoplatform.atomicdex"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        buildConfigField "Long", "BUILD_TIME", "" + System.currentTimeMillis() + "L"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // mm2_lib.a requires libc++
                cppFlags "-std=c++17 -stdlib=libc++"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }


    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources false
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

// Setting the “vscode-java-pack” classpath
// cf. https://github.com/redhat-developer/vscode-java/issues/285#issuecomment-327096613
// cf. https://docs.gradle.org/5.6.2/javadoc/
apply plugin: 'eclipse'
eclipse {
    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }
    classpath {
        file {
            whenMerged {
                ext.log = {line ->
                    System.out.println (line)
                    def date = new Date() .format ('kk:mm:ss')
                    new File ("build/eclipse-gradle.log") .append ("$date $line\n")}
                ext.addEntry = {path ->
                    log ("addEntry] $path")
                    entries += new org.gradle.plugins.ide.eclipse.model.Library (fileReference (path.toString()))}

                project.android.getBootClasspath().each {addEntry ("$it")}

                // NB: Use `flutter build apk --debug` to generate the `intermediates`
                def ims = project.getBuildDir().absolutePath + '/intermediates'
                addEntry (ims + '/flutter/debug/libs.jar')
                addEntry (ims + '/javac/debug/classes')  // R.class

                def debug = project.android.applicationVariants[0]
                debug.getCompileClasspath().each {addEntry (it)}
            }
        }
    }
}
